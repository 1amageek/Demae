{"ast":null,"code":"export var ShardCharacters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\nexport var DafaultShardCharacters = ShardCharacters.slice(0, 10);\nexport var randomShard = seed => {\n  return seed[Math.floor(Math.random() * Math.floor(seed.length))];\n};\nvar MAX_IN_VALUES = 10;\nexport var shardChunks = shards => {\n  var chunks = [];\n  var start = 0;\n\n  while (start < shards.length) {\n    var elements = Math.min(MAX_IN_VALUES, shards.length - start);\n    var end = start + elements;\n    chunks.push(shards.slice(start, end));\n    start = end;\n  }\n\n  return chunks;\n};","map":{"version":3,"sources":["/Users/1amageek/Desktop/Demae/src/app/models/commerce/Shard.ts"],"names":[],"mappings":"AAUA,OAAO,IAAM,eAAe,GAAgB,CAC3C,GAD2C,EACtC,GADsC,EACjC,GADiC,EAC5B,GAD4B,EACvB,GADuB,EAE3C,GAF2C,EAEtC,GAFsC,EAEjC,GAFiC,EAE5B,GAF4B,EAEvB,GAFuB,EAG3C,GAH2C,EAGtC,GAHsC,EAGjC,GAHiC,EAG5B,GAH4B,EAGvB,GAHuB,EAI3C,GAJ2C,EAItC,GAJsC,EAIjC,GAJiC,EAI5B,GAJ4B,EAIvB,GAJuB,EAK3C,GAL2C,EAKtC,GALsC,EAKjC,GALiC,EAK5B,GAL4B,EAKvB,GALuB,EAM3C,GAN2C,CAArC;AASP,OAAO,IAAM,sBAAsB,GAAgB,eAAe,CAAC,KAAhB,CAAsB,CAAtB,EAAyB,EAAzB,CAA5C;AAEP,OAAO,IAAM,WAAW,GAAI,IAAD,IAAiC;AAC3D,SAAO,IAAI,CAAC,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAhB,CAA3B,CAAD,CAAX;AACA,CAFM;AAIP,IAAM,aAAa,GAAG,EAAtB;AAEA,OAAO,IAAM,WAAW,GAAI,MAAD,IAAsC;AAChE,MAAM,MAAM,GAAiB,EAA7B;AACA,MAAI,KAAK,GAAG,CAAZ;;AACA,SAAO,KAAK,GAAG,MAAM,CAAC,MAAtB,EAA8B;AAC7B,QAAM,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,MAAM,CAAC,MAAP,GAAgB,KAAxC,CAAjB;AACA,QAAM,GAAG,GAAG,KAAK,GAAG,QAApB;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,KAAP,CAAa,KAAb,EAAoB,GAApB,CAAZ;AACA,IAAA,KAAK,GAAG,GAAR;AACA;;AACD,SAAO,MAAP;AACA,CAVM","sourcesContent":["export type ShardType =\r\n\t'a' | 'b' | 'c' | 'd' | 'e' |\r\n\t'f' | 'g' | 'h' | 'i' | 'j' |\r\n\t'k' | 'l' | 'm' | 'n' | 'o' |\r\n\t'p' | 'q' | 'r' | 's' | 't' |\r\n\t'u' | 'v' | 'w' | 'x' | 'y' |\r\n\t'z'\r\n\r\nexport type ShardChank = ShardType[]\r\n\r\nexport const ShardCharacters: ShardType[] = [\r\n\t'a', 'b', 'c', 'd', 'e',\r\n\t'f', 'g', 'h', 'i', 'j',\r\n\t'k', 'l', 'm', 'n', 'o',\r\n\t'p', 'q', 'r', 's', 't',\r\n\t'u', 'v', 'w', 'x', 'y',\r\n\t'z'\r\n]\r\n\r\nexport const DafaultShardCharacters: ShardType[] = ShardCharacters.slice(0, 10)\r\n\r\nexport const randomShard = (seed: ShardType[]): ShardType => {\r\n\treturn seed[Math.floor(Math.random() * Math.floor(seed.length))]\r\n}\r\n\r\nconst MAX_IN_VALUES = 10\r\n\r\nexport const shardChunks = (shards: ShardType[]): ShardChank[] => {\r\n\tconst chunks: ShardChank[] = []\r\n\tlet start = 0\r\n\twhile (start < shards.length) {\r\n\t\tconst elements = Math.min(MAX_IN_VALUES, shards.length - start)\r\n\t\tconst end = start + elements\r\n\t\tchunks.push(shards.slice(start, end))\r\n\t\tstart = end\r\n\t}\r\n\treturn chunks\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}